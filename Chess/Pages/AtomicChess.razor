@page "/AtomicChess"
@using Chesslogic
<style>
    body {
        background-color: #B5C4B5;
        
        
    }



.chess-board {
    background-image: url('Assets/Board.png');
    background-size: contain;
    background-repeat: no-repeat;
    width: 50%; 
    margin-left: auto;
    margin-right: auto;
    display: block; 
    position: relative;
    padding-top: 50%; 
}
.darkened-square {
    background-color: rgba(0, 0, 0, 0.5); 
}
.chess-row {
    width: 100%;
    position: absolute; 
}
.potential-move {
    background-color: rgba(0, 0, 0, 0.5); 
}
.chess-square {
    width: 12.5%; 
    height: 100%; 
    float: left; 
    position: relative; 
}

.chess-piece {
    width: 100%; 
    height: auto; 
    
    
}

.highlighted-square {
    background-color: rgba(0, 0, 0, 0.7); 
}
</style>
<div class="chess-board" style="background-image: url('Assets/Board.png');">
    @for (int row = 0; row < 8; row++)
    {
        int localRow = row; // Local copy of row to capture correctly in lambda expressions
        <div class="chess-row" style="top: @(localRow * 12.5)%; height: 12.5%;">
            @for (int col = 0; col < 8; col++)
            {
                int localCol = col; // Local copy of col to capture correctly in lambda expressions
                var pos = new Position(localRow, localCol);
                <div class="chess-square @(controller.GetSquareClass(localRow, localCol))"
                     @onclick="() => controller.HandleClick(new Position(localRow, localCol))">
                     @if (controller.CurrentGame.Board[new Position(localRow, localCol)] != null)
                     {
                         <img class="chess-piece" src="@controller.GetPieceImage(controller.CurrentGame.Board[pos])" alt="Chess Piece" />
                     }
                    
                </div>
            }
        </div>
    }
</div>


@code {
    private ChessGameController controller;

    protected override void OnInitialized()
    {
        var board = Board.InitializeStandard();
        var standardGame = new StandardChessGame(board);
        controller = new ChessGameController(new AtomicChessGame(standardGame, board));

        controller.OnUpdateRequested += UpdateComponentState;
    }
    private void UpdateComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        controller.OnUpdateRequested -= UpdateComponentState;
    }

}