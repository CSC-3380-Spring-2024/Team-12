@page "/FogOfWar"
@using Chesslogic
<style>
    body {
        background-color: #B5C4B5;
        
       
    }

.chess-board {
    background-image: url('Assets/Board.png');
    background-size: contain;
    background-repeat: no-repeat;
    width: 50%; 
    margin-left: auto;
    margin-right: auto;
    display: block; 
    position: relative;
    padding-top: 50%; 
}
.darkened-square {
    background-color: rgba(0, 0, 0, 0.5); 
}
.chess-row {
    width: 100%;
    position: absolute; 
}
.potential-move {
    background-color: rgba(0, 0, 0, 0.5); 
}
.chess-square {
    width: 12.5%; 
    height: 100%; 
    float: left; 
    position: relative; 
}

.chess-piece {
    width: 100%; 
    height: auto; 
    
    
}


    .fog-of-war {
        background-color: rgba(0, 0, 0, 0.7);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

.highlighted-square {
    
}

</style>

<div class="chess-board">
    @for (int row = 0; row < 8; row++)
    {
        int localRow = row;
        <div class="chess-row" style="top: @(localRow * 12.5)%; height: 12.5%;">
            @for (int col = 0; col < 8; col++)
            {
                int localCol = col;
                <div class="chess-square @(GetSquareClass(localRow, localCol))"
                     @onclick="() => HandleClick(new Position(localRow, localCol))">
                     @if (IsVisible(localRow, localCol))
                     {
                         @if (board[localRow, localCol] != null)
                         {
                             <img class="chess-piece" src="@GetPieceImage(localRow, localCol)" alt="Chess Piece">
                         }
                     }
                     else
                     {
                         <div class="fog-of-war"></div>
                     }
                </div>
            }
        </div>
    }
</div>

@code {
    private Game gameState;
    private Board board;
    private List<Position> potentialMoves = new List<Position>();
    private Position selectedPosition;
    private bool isPositionSelected = false;
    private bool[,] visibilityGrid;

    protected override void OnInitialized()
    {
        gameState = new Game(Player.White, Board.Initialize());
        board = gameState.Board;
        visibilityGrid = new bool[8, 8];
        UpdateVisibility();
    }

    private void HandleClick(Position pos)
    {
        if (!isPositionSelected)
        {
            if (!board.isEmpty(pos) && board[pos].Color == gameState.Current)
            {
                selectedPosition = pos;
                isPositionSelected = true;
                potentialMoves = gameState.LegalMoves(selectedPosition).Select(m => m.ToPosition).ToList();
            }
        }
        else
        {
            if (selectedPosition.Equals(pos))
            {
                DeselectPiece();
            }
            else if (potentialMoves.Contains(pos))
            {
                ExecuteMove(pos);
            }
        }
    }

    private void ExecuteMove(Position pos)
    {
        gameState.MakeMove(new normalMove(selectedPosition, pos));
        DeselectPiece();
        UpdateVisibility();  // Ensure visibility is recalculated after each move
    }

    private void DeselectPiece()
    {
        isPositionSelected = false;
        potentialMoves.Clear();
    }

    private void UpdateVisibility()
    {
        // Reset visibility grid
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                visibilityGrid[i, j] = false; // No square is visible by default
            }
        }

        // Update visibility based on the position of each piece
        for (int row = 0; row < 8; row++)
        {
            for (int col = 0; col < 8; col++)
            {
                var piece = board[row, col];
                if (piece != null && piece.Color == gameState.Current)
                {
                    // Set visibility for the piece's position
                    SetVisibilityForPiece(row, col);
                }
            }
        }

        StateHasChanged();  // Notify Blazor to re-render the UI
    }

    private void SetVisibilityForPiece(int row, int col)
    {
        // Assuming each piece can see 1 square in all directions
        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                int newRow = row + i;
                int newCol = col + j;
                if (IsWithinBounds(newRow, newCol))
                {
                    visibilityGrid[newRow, newCol] = true;
                }
            }
        }
    }

    private bool IsWithinBounds(int row, int col)
    {
        return row >= 0 && row < 8 && col >= 0 && col < 8;
    }

    private bool IsVisible(int row, int col)
    {
        return visibilityGrid[row, col];  // Return visibility from the grid
    }


    private string GetSquareClass(int row, int col)
    {
        Position currentPos = new Position(row, col);
        if (isPositionSelected && selectedPosition.Equals(currentPos))
            return "highlighted-square";
        if (potentialMoves.Contains(currentPos))
            return "potential-move";
        return "";
    }

    private string GetPieceImage(int row, int col)
    {
        var piece = board[row, col];
        return piece != null ? Images.GetImage(piece) : string.Empty;
    }
}