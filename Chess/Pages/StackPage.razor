@page "/StackedGames"
@using Chesslogic

<style>
    body {
        background-color: #B5C4B5;
    }

    .chess-board {
        background-image: url('Assets/Board.png');
        background-size: contain;
        background-repeat: no-repeat;
        width: 50%;
        margin-left: auto;
        margin-right: auto;
        display: block;
        position: relative;
        padding-top: 50%;
    }
    .chess-row {
        width: 100%;
        position: absolute;
    }
    .chess-square {
        width: 12.5%;
        height: 100%;
        float: left;
        position: relative;
    }
    .chess-piece {
        width: 100%;
        height: auto;
    }
    .highlighted-square {
        background-color: rgba(0, 0, 0, 0.7);
    }
    .fog-of-war {
        background-color: rgba(0, 0, 0, 0.7);
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }
    .toggle-button {
        padding: 10px;
        margin: 5px;
        background-color: lightgray;
        border: none;
        cursor: pointer;
    }
    .toggle-button:hover {
        background-color: gray;
    }
</style>

<div>
    <button class="toggle-button" @onclick="ToggleAtomicGame">Toggle Atomic Game</button>
    <button class="toggle-button" @onclick="ToggleFogOfWar">Toggle Fog of War</button>
    <button class="toggle-button" @onclick="ToggleRandomChess">Toggle Random Chess</button>
    <button class="toggle-button" @onclick="ToggleHalfChess">Toggle Half Chess</button>
    <button class="toggle-button" @onclick="ToggleAllQueens">Toggle All Queens</button>
    <button class="toggle-button" @onclick="ToggleHordeChess">Toggle Horde Chess</button>
</div>
<div class="chess-board" style="background-image: url('Assets/Board.png');">
    @for (int row = 0; row < 8; row++)
    {
        int localRow = row;
        <div class="chess-row" style="top: @(localRow * 12.5)%; height: 12.5%;">
            @for (int col = 0; col < 8; col++)
            {
                int localCol = col;
                var pos = new Position(localRow, localCol);
                <div class="chess-square @(controller.GetSquareClass(localRow, localCol))"
                     @onclick="() => controller.HandleClick(pos)">
                     @if (controller.CurrentGame is FogOfWarChessGame fogOfWarGame && fogOfWarGame.IsVisible(pos))
                     {
                         <img class="chess-piece" src="@controller.GetPieceImage(controller.CurrentGame.Board[pos])" alt="Chess Piece" />
                     }
                     else if (controller.CurrentGame is FogOfWarChessGame && !((FogOfWarChessGame)controller.CurrentGame).IsVisible(pos))
                     {
                         <div class="fog-of-war"></div>
                     }
                     else if (controller.CurrentGame.Board[pos] != null) 
                     {
                         <img class="chess-piece" src="@controller.GetPieceImage(controller.CurrentGame.Board[pos])" alt="Chess Piece" />
                     }
                </div>
            }
        </div>
    }
</div>



@code {
    private ChessGameController controller;

    protected override void OnInitialized()
    {
        var board = Board.InitializeStandard();
        var standardGame = new StandardChessGame(board);
        controller = new ChessGameController(standardGame);
        controller.AddGameMode(standardGame);
    }

    private void ToggleAtomicGame()
{
    if (controller.ContainsGameMode(typeof(AtomicChessGame)))
    {
        controller.RemoveGameMode(typeof(AtomicChessGame));
        Console.WriteLine("Atomic Game mode deactivated.");
    }
    else
    {
        
        var atomicGame = new AtomicChessGame(controller.CurrentGame);
        controller.AddGameMode(atomicGame);
        Console.WriteLine("Atomic Game mode activated.");
    }
    UpdateComponentState(); 
}

private void ToggleFogOfWar() 
{
    if (controller.ContainsGameMode(typeof(FogOfWarChessGame))) 
    {
        controller.RemoveGameMode(typeof(FogOfWarChessGame));
        Console.WriteLine("Fog of War mode deactivated.");
    } 
    else 
    {
        
        var fogOfWarGame = new FogOfWarChessGame(controller.CurrentGame);
        controller.AddGameMode(fogOfWarGame);
        Console.WriteLine("Fog of War mode activated.");
    }
    UpdateComponentState(); 
}

    private void ToggleRandomChess()
    {
        if (controller.ContainsGameMode(typeof(RandomChessGame)))
        {
            controller.RemoveGameMode(typeof(RandomChessGame));
            Console.WriteLine("Random Chess mode deactivated.");
        }
        else
        {
            var randomChess = new RandomChessGame(controller.CurrentGame.Board);
            controller.AddGameMode(randomChess);
            Console.WriteLine("Random Chess mode activated.");
        }
        UpdateComponentState();
    }

    private void ToggleHalfChess()
    {
        if (controller.ContainsGameMode(typeof(HalfChessGame)))
        {
            controller.RemoveGameMode(typeof(HalfChessGame));
            Console.WriteLine("Half Chess mode deactivated.");
        }
        else
        {
            var halfChess = new HalfChessGame(controller.CurrentGame.Board);
            controller.AddGameMode(halfChess);
            Console.WriteLine("Half Chess mode activated.");
        }
        UpdateComponentState();
    }

    private void ToggleAllQueens()
    {
        if (controller.ContainsGameMode(typeof(AllQueensChessGame)))
        {
            controller.RemoveGameMode(typeof(AllQueensChessGame));
            Console.WriteLine("All Queens mode deactivated.");
        }
        else
        {
            var allQueens = new AllQueensChessGame(controller.CurrentGame.Board);
            controller.AddGameMode(allQueens);
            Console.WriteLine("All Queens mode activated.");
        }
        UpdateComponentState();
    }

    private void ToggleHordeChess()
    {
        if (controller.ContainsGameMode(typeof(HordeChessGame)))
        {
            controller.RemoveGameMode(typeof(HordeChessGame));
            Console.WriteLine("Horde Chess mode deactivated.");
        }
        else
        {
            var hordeChess = new HordeChessGame(controller.CurrentGame.Board);
            controller.AddGameMode(hordeChess);
            Console.WriteLine("Horde Chess mode activated.");
        }
        UpdateComponentState();
    }

    private void UpdateComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
}
